# Generated by Django 5.2.3 on 2025-06-24 12:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('issuing_organization', models.CharField(max_length=200)),
                ('issue_date', models.DateField()),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('certificate_id', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_logos/')),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('website', models.URLField(blank=True)),
                ('license_number', models.CharField(max_length=100, unique=True)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('billing_cycle', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='monthly', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PackageCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Package Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('networking', 'Networking'), ('hardware', 'Hardware'), ('software', 'Software'), ('customer_service', 'Customer Service')], max_length=50)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='TicketCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('default_priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('sla_response_hours', models.PositiveIntegerField(default=24)),
                ('sla_resolution_hours', models.PositiveIntegerField(default=72)),
            ],
            options={
                'verbose_name_plural': 'Ticket Categories',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('super_admin', 'Super Admin'), ('network_admin', 'Network Administrator'), ('customer_service', 'Customer Service'), ('technician', 'Technician'), ('billing_admin', 'Billing Administrator'), ('customer', 'Customer')], default='customer', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('is_verified', models.BooleanField(default=False)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('department', models.CharField(blank=True, max_length=50)),
                ('hire_date', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='isp.company')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer_id', models.CharField(max_length=20, unique=True)),
                ('customer_type', models.CharField(choices=[('individual', 'Individual'), ('business', 'Business'), ('government', 'Government')], default='individual', max_length=20)),
                ('status', models.CharField(choices=[('lead', 'Lead'), ('active', 'Active'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='lead', max_length=20)),
                ('primary_phone', models.CharField(max_length=20)),
                ('secondary_phone', models.CharField(blank=True, max_length=20)),
                ('primary_email', models.EmailField(max_length=254)),
                ('secondary_email', models.EmailField(blank=True, max_length=254)),
                ('installation_address', models.TextField()),
                ('billing_address', models.TextField(blank=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(default='Kenya', max_length=100)),
                ('coordinates', models.CharField(blank=True, help_text='Latitude, Longitude', max_length=50)),
                ('business_name', models.CharField(blank=True, max_length=200)),
                ('business_registration', models.CharField(blank=True, max_length=100)),
                ('tax_id', models.CharField(blank=True, max_length=50)),
                ('activation_date', models.DateTimeField(blank=True, null=True)),
                ('termination_date', models.DateTimeField(blank=True, null=True)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('preferred_language', models.CharField(default='en', max_length=10)),
                ('auto_pay_enabled', models.BooleanField(default=False)),
                ('email_notifications', models.BooleanField(default=True)),
                ('sms_notifications', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='isp.company')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invoice_number', models.CharField(max_length=30, unique=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('issue_date', models.DateField()),
                ('due_date', models.DateField()),
                ('paid_date', models.DateField(blank=True, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('terms', models.TextField(blank=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='isp.customer')),
            ],
            options={
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=300)),
                ('quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='isp.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='IPAddressPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('network', models.CharField(help_text='e.g., 192.168.1.0/24', max_length=50)),
                ('pool_type', models.CharField(choices=[('public', 'Public'), ('private', 'Private'), ('management', 'Management')], max_length=20)),
                ('gateway', models.GenericIPAddressField(blank=True, null=True)),
                ('dns_primary', models.GenericIPAddressField(blank=True, null=True)),
                ('dns_secondary', models.GenericIPAddressField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_pools', to='isp.company')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('coverage_area', models.TextField(help_text='Geographic area covered')),
                ('coordinates_center', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_zones', to='isp.company')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkEquipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('equipment_type', models.CharField(choices=[('router', 'Router'), ('switch', 'Switch'), ('access_point', 'Access Point'), ('modem', 'Modem'), ('antenna', 'Antenna'), ('server', 'Server'), ('ups', 'UPS'), ('other', 'Other')], max_length=20)),
                ('brand', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('mac_address', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')])),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('port_count', models.PositiveIntegerField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('maintenance', 'Under Maintenance'), ('faulty', 'Faulty'), ('retired', 'Retired')], default='active', max_length=20)),
                ('location', models.TextField()),
                ('coordinates', models.CharField(blank=True, max_length=50)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('warranty_expiry', models.DateField(blank=True, null=True)),
                ('vendor', models.CharField(blank=True, max_length=200)),
                ('last_maintenance', models.DateTimeField(blank=True, null=True)),
                ('next_maintenance', models.DateTimeField(blank=True, null=True)),
                ('maintenance_notes', models.TextField(blank=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_equipment', to='isp.company')),
                ('zone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='isp.networkzone')),
            ],
            options={
                'ordering': ['equipment_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('notification_type', models.CharField(choices=[('welcome', 'Welcome Message'), ('billing_reminder', 'Billing Reminder'), ('payment_confirmation', 'Payment Confirmation'), ('service_activation', 'Service Activation'), ('service_suspension', 'Service Suspension'), ('maintenance_notice', 'Maintenance Notice'), ('ticket_update', 'Ticket Update')], max_length=30)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')], max_length=20)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('send_delay', models.PositiveIntegerField(default=0, help_text='Delay in minutes')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_templates', to='isp.company')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subject', models.CharField(blank=True, max_length=200)),
                ('message', models.TextField()),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='isp.notificationtemplate')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InternetPackage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('package_type', models.CharField(choices=[('hotspot', 'Hotspot'), ('pppoe', 'PPPoE'), ('fiber', 'Fiber'), ('wireless', 'Wireless'), ('corporate', 'Corporate')], max_length=20)),
                ('billing_type', models.CharField(choices=[('time_based', 'Time Based'), ('data_based', 'Data Based'), ('unlimited', 'Unlimited')], max_length=20)),
                ('download_speed', models.PositiveIntegerField(help_text='Speed in Mbps')),
                ('upload_speed', models.PositiveIntegerField(help_text='Speed in Mbps')),
                ('data_limit', models.PositiveIntegerField(blank=True, help_text='Data limit in GB', null=True)),
                ('time_limit', models.PositiveIntegerField(blank=True, help_text='Time limit in hours', null=True)),
                ('priority_level', models.PositiveIntegerField(default=1, help_text='1 = Highest, 10 = Lowest', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('burst_speed', models.PositiveIntegerField(blank=True, help_text='Burst speed in Mbps', null=True)),
                ('fair_usage_policy', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('setup_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('max_subscribers', models.PositiveIntegerField(blank=True, null=True)),
                ('current_subscribers', models.PositiveIntegerField(default=0)),
                ('uptime_guarantee', models.DecimalField(decimal_places=2, default=99.9, max_digits=5, validators=[django.core.validators.MinValueValidator(90), django.core.validators.MaxValueValidator(100)])),
                ('support_hours', models.CharField(default='24/7', max_length=50)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to='isp.company')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='isp.packagecategory')),
            ],
            options={
                'ordering': ['package_type', 'price'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment_id', models.CharField(max_length=30, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('credit_card', 'Credit Card'), ('mobile_money', 'Mobile Money'), ('cheque', 'Cheque'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('payment_date', models.DateTimeField()),
                ('notes', models.TextField(blank=True)),
                ('receipt_number', models.CharField(blank=True, max_length=50)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='isp.customer')),
                ('invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='isp.invoice')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-payment_date'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subscription_id', models.CharField(max_length=30, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('suspended', 'Suspended'), ('terminated', 'Terminated'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('next_billing_date', models.DateTimeField()),
                ('last_billing_date', models.DateTimeField(blank=True, null=True)),
                ('data_used', models.BigIntegerField(default=0, help_text='Data used in bytes')),
                ('time_used', models.PositiveIntegerField(default=0, help_text='Time used in minutes')),
                ('assigned_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('mac_address', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator('^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$')])),
                ('username', models.CharField(blank=True, max_length=100)),
                ('password', models.CharField(blank=True, max_length=100)),
                ('monthly_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('setup_fee_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_paid', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('installation_date', models.DateTimeField(blank=True, null=True)),
                ('installation_notes', models.TextField(blank=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='isp.customer')),
                ('installation_technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='installations', to=settings.AUTH_USER_MODEL)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='isp.internetpackage')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IPAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('status', models.CharField(choices=[('available', 'Available'), ('assigned', 'Assigned'), ('reserved', 'Reserved'), ('blocked', 'Blocked')], default='available', max_length=20)),
                ('assigned_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('pool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ip_addresses', to='isp.ipaddresspool')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_ips', to='isp.subscription')),
            ],
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='isp.subscription'),
        ),
        migrations.CreateModel(
            name='BandwidthLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('timestamp', models.DateTimeField()),
                ('download_speed', models.PositiveIntegerField(help_text='Speed in Kbps')),
                ('upload_speed', models.PositiveIntegerField(help_text='Speed in Kbps')),
                ('latency', models.PositiveIntegerField(blank=True, help_text='Latency in ms', null=True)),
                ('packet_loss', models.DecimalField(blank=True, decimal_places=2, help_text='Packet loss percentage', max_digits=5, null=True)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bandwidth_logs', to='isp.subscription')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], default='info', max_length=20)),
                ('action_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('create', 'Record Created'), ('update', 'Record Updated'), ('delete', 'Record Deleted'), ('payment', 'Payment Processed'), ('service_change', 'Service Change'), ('system_error', 'System Error')], max_length=30)),
                ('message', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('object_type', models.CharField(blank=True, max_length=50)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ticket_id', models.CharField(max_length=20, unique=True)),
                ('subject', models.CharField(max_length=300)),
                ('description', models.TextField()),
                ('ticket_type', models.CharField(choices=[('technical', 'Technical Issue'), ('billing', 'Billing Inquiry'), ('service_request', 'Service Request'), ('complaint', 'Complaint'), ('feedback', 'Feedback')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('pending_customer', 'Pending Customer'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('assigned_date', models.DateTimeField(blank=True, null=True)),
                ('sla_response_due', models.DateTimeField(blank=True, null=True)),
                ('sla_resolution_due', models.DateTimeField(blank=True, null=True)),
                ('first_response_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('satisfaction_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('satisfaction_comment', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='isp.customer')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='isp.ticketcategory')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comment', models.TextField()),
                ('is_internal', models.BooleanField(default=False)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='ticket_attachments/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_comments', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='isp.ticket')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_start', models.DateTimeField()),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('bytes_uploaded', models.BigIntegerField(default=0)),
                ('bytes_downloaded', models.BigIntegerField(default=0)),
                ('ip_address', models.GenericIPAddressField()),
                ('mac_address', models.CharField(blank=True, max_length=17)),
                ('nas_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('nas_port', models.CharField(blank=True, max_length=20)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('termination_cause', models.CharField(blank=True, max_length=50)),
                ('subscription', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='isp.subscription')),
            ],
            options={
                'ordering': ['-session_start'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bio', models.TextField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('certifications', models.ManyToManyField(blank=True, to='isp.certification')),
                ('skills', models.ManyToManyField(blank=True, to='isp.skill')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['customer_id'], name='isp_custome_custome_08dbb1_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['status'], name='isp_custome_status_e0e649_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'status'], name='isp_custome_company_9a3779_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ipaddresspool',
            unique_together={('company', 'network')},
        ),
        migrations.AlterUniqueTogether(
            name='networkzone',
            unique_together={('company', 'name')},
        ),
        migrations.AddIndex(
            model_name='networkequipment',
            index=models.Index(fields=['equipment_type', 'status'], name='isp_network_equipme_e3c311_idx'),
        ),
        migrations.AddIndex(
            model_name='networkequipment',
            index=models.Index(fields=['zone', 'status'], name='isp_network_zone_id_b06bbb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationtemplate',
            unique_together={('company', 'notification_type', 'channel')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'status'], name='isp_notific_recipie_0a25f9_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['status', 'sent_at'], name='isp_notific_status_bcde2a_idx'),
        ),
        migrations.AddIndex(
            model_name='internetpackage',
            index=models.Index(fields=['package_type', 'is_active'], name='isp_interne_package_6fa7a3_idx'),
        ),
        migrations.AddIndex(
            model_name='internetpackage',
            index=models.Index(fields=['company', 'is_active'], name='isp_interne_company_0419c3_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_id'], name='isp_payment_payment_447468_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['customer', 'status'], name='isp_payment_custome_90280e_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_date'], name='isp_payment_payment_f668da_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['subscription_id'], name='isp_subscri_subscri_ed423f_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['customer', 'status'], name='isp_subscri_custome_ba5eec_idx'),
        ),
        migrations.AddIndex(
            model_name='subscription',
            index=models.Index(fields=['next_billing_date'], name='isp_subscri_next_bi_7c4c3a_idx'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['status'], name='isp_ipaddre_status_626166_idx'),
        ),
        migrations.AddIndex(
            model_name='ipaddress',
            index=models.Index(fields=['assigned_to'], name='isp_ipaddre_assigne_87452e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='ipaddress',
            unique_together={('pool', 'ip_address')},
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_number'], name='isp_invoice_invoice_be1774_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['customer', 'status'], name='isp_invoice_custome_a11925_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date', 'status'], name='isp_invoice_due_dat_9c0dd9_idx'),
        ),
        migrations.AddIndex(
            model_name='bandwidthlog',
            index=models.Index(fields=['subscription', 'timestamp'], name='isp_bandwid_subscri_13982c_idx'),
        ),
        migrations.AddIndex(
            model_name='bandwidthlog',
            index=models.Index(fields=['timestamp'], name='isp_bandwid_timesta_e0bd05_idx'),
        ),
        migrations.AddIndex(
            model_name='systemlog',
            index=models.Index(fields=['user', 'created_at'], name='isp_systeml_user_id_284f28_idx'),
        ),
        migrations.AddIndex(
            model_name='systemlog',
            index=models.Index(fields=['level', 'created_at'], name='isp_systeml_level_1ea703_idx'),
        ),
        migrations.AddIndex(
            model_name='systemlog',
            index=models.Index(fields=['action_type', 'created_at'], name='isp_systeml_action__4777f6_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['ticket_id'], name='isp_ticket_ticket__554cbc_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['status', 'priority'], name='isp_ticket_status_a04647_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['assigned_to', 'status'], name='isp_ticket_assigne_df6772_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['customer', 'status'], name='isp_ticket_custome_cfd8d1_idx'),
        ),
        migrations.AddIndex(
            model_name='usagelog',
            index=models.Index(fields=['subscription', 'session_start'], name='isp_usagelo_subscri_ce772d_idx'),
        ),
        migrations.AddIndex(
            model_name='usagelog',
            index=models.Index(fields=['session_start'], name='isp_usagelo_session_83caec_idx'),
        ),
    ]
